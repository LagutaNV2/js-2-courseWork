import GameController from '../GameController';
import GamePlay from '../GamePlay';
import PositionedCharacter from "../PositionedCharacter";
import { Team } from '../Team';
import themes from '../themes';
import GameStateService from '../GameStateService';
import Character from "../Character";
// import StateService from '../StateService';
import Bowman from '../characters/Bowman';
import Swordsman from '../characters/Swordsman';
import Magician from '../characters/Magician';
import Vampire from '../characters/Vampire';
import Undead from '../characters/Undead';
import Daemon from '../characters/Daemon';

// jest.mock('../GamePlay');
// jest.mock('../StateService');

// describe('GameController', () => {
//   let gamePlay;
//   let stateService;
//   let gameController;

//   beforeEach(() => {
//     gamePlay = new GamePlay();
//     // stateService = new StateService();
//     gameController = new GameController(gamePlay, stateService);
//   });



//   test('initNewGame() initializes the game correctly', () => {
//     gameController.initNewGame();

//     expect(gamePlay.drawUi).toHaveBeenCalledWith('prairie');
//     expect(gameController.playerTeam.length).toBe(2); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
//     expect(gameController.enemyTeam.length).toBe(2); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
//     expect(gamePlay.redrawPositions).toHaveBeenCalledWith(gameController.positions);
//   });

//   test('createTeams() generates unique positions for characters', () => {
//     gameController.createTeams();

//     const allPositions = gameController.positions.map((pos) => pos.position);
//     const uniquePositions = new Set(allPositions);

//     expect(allPositions.length).toBe(uniquePositions.size); // –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã
//   });

//   test('placeTeam() places characters in correct columns', () => {
//     const characters = [new Bowman(1), new Bowman(2)];
//     const placedTeam = gameController.placeTeam(characters, [0, 1]);

//     placedTeam.forEach((posChar) => {
//       const column = posChar.position % gameController.boardSize;
//       expect([0, 1]).toContain(column); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö 0 –∏–ª–∏ 1
//     });
//   });

//   test('formatCharacterInfo() formats character info correctly', () => {
//     const character = new Bowman(1);
//     character.attack = 25;
//     character.defence = 25;
//     character.health = 100;

//     const formatted = gameController.formatCharacterInfo(character);
//     expect(formatted).toBe('üéñ1 ‚öî25 üõ°25 ‚ù§100');
//   });

//   test('onCellEnter() shows tooltip with character info', () => {
//     const character = new Bowman(1);
//     character.attack = 25;
//     character.defence = 25;
//     character.health = 100;

//     gameController.positions = [{ character, position: 5 }];
//     gameController.onCellEnter(5);

//     expect(gamePlay.showCellTooltip).toHaveBeenCalledWith('üéñ1 ‚öî25 üõ°25 ‚ù§100', 5);
//   });

//   test('onCellLeave() hides tooltip', () => {
//     gameController.onCellLeave(5);
//     expect(gamePlay.hideCellTooltip).toHaveBeenCalledWith(5);
//   });

// });

describe('GameController - Tests', () => {
  let gameController;
  let gamePlayMock;
  let stateServiceMock;

  beforeEach(() => {
      // –°–æ–∑–¥–∞—ë–º mock GamePlay
      gamePlayMock = new GamePlay();
      gamePlayMock.container = document.createElement('div');
      gamePlayMock.container.id = 'game-container';
      gamePlayMock.drawUi = jest.fn();
      gamePlayMock.redrawPositions = jest.fn();
      document.body.appendChild(gamePlayMock.container);

      // –°–æ–∑–¥–∞—ë–º mock StateService
      stateServiceMock = new GameStateService(localStorage);
      jest.spyOn(stateServiceMock, 'load').mockImplementation(() => ({
          positions: [
              { position: 5, character: new Bowman(1) },
              { position: 7, character: new Vampire(1) },
          ],
          occupiedPositions: [5, 7],
          level: 3,
          playerMove: true,
          userStats: 120,
          maxScore: 200,
      }));
      jest.spyOn(stateServiceMock, 'save').mockImplementation(() => {});

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GameController
      gameController = new GameController(gamePlayMock, stateServiceMock);
  });

  afterEach(() => {
      jest.clearAllMocks();
      document.body.innerHTML = '';
  });

  test('init initializes the game correctly', () => {
      gameController.init();

      expect(gameController.currentThemeIndex).toBe(0);
      // expect(gameController.currentScore).toBe(0);
      expect(gameController.maxScore).toBe(200);
      expect(gamePlayMock.drawUi).toHaveBeenCalledWith(themes.prairie);
  });

  test('onLoadGameClick restores game state correctly', () => {
      gameController.onLoadGameClick();

      expect(gameController.currentThemeIndex).toBe(2); // Level 3 -> Index 2
      // expect(gameController.currentScore).toBe(120);
      expect(gameController.maxScore).toBe(200);
      expect(gameController.positions.length).toBe(2);
      expect(gamePlayMock.drawUi).toHaveBeenCalledWith(themes.arctic); // –¢–µ–º–∞ 3 —É—Ä–æ–≤–Ω—è
  });

  test('updateScoreDisplay updates the score board', () => {
      gameController.currentScore = 150;
      gameController.maxScore = 300;
      gameController.updateScoreDisplay();

      const scoreBoard = gamePlayMock.container.querySelector('.score-board');
      expect(scoreBoard).not.toBeNull();
      expect(scoreBoard.textContent).toContain('–†–µ–∫–æ—Ä–¥: 300');
      expect(scoreBoard.textContent).toContain('—Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: 150');
  });

  test('redrawPositions maintains .score-board in DOM', () => {
      gameController.init();

      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ .score-board —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const scoreBoard = document.querySelector('.score-board');
      expect(scoreBoard).not.toBeNull();

      // –í—ã–∑—ã–≤–∞–µ–º redrawPositions –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ .score-board –æ—Å—Ç–∞—ë—Ç—Å—è
      gameController.redrawPositions();
      const updatedScoreBoard = document.querySelector('.score-board');
      expect(updatedScoreBoard).not.toBeNull();
  });

});


describe('GameController - Movement Ranges', () => {
  let gameController;

  beforeEach(() => {
    const gamePlay = new GamePlay();
    const stateService = {}; // –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è stateService
    gameController = new GameController(gamePlay, stateService);
    gameController.createTeams();
  });

  test('Bowman movement range', () => {
    const bowman = new Bowman(1);
    const position = 27; // –ü–æ–∑–∏—Ü–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ –¥–æ—Å–∫–∏
    const range = gameController.getMoveRange(bowman, position);
    expect(range).toEqual(expect.arrayContaining([19, 20, 26, 28, 34, 35]));
  });

  test('Swordsman movement range', () => {
    const swordsman = new Swordsman(1);
    const position = 27;
    const range = gameController.getMoveRange(swordsman, position);
    expect(range).toEqual(expect.arrayContaining([3, 11, 19, 35, 43, 51]));
  });

  test('Magician movement range', () => {
    const magician = new Magician(1);
    const position = 27;
    const range = gameController.getMoveRange(magician, position);
    expect(range).toEqual(expect.arrayContaining([26, 28, 19, 35]));
  });

  test('Vampire movement range', () => {
    const vampire = new Vampire(1);
    const position = 27;
    const range = gameController.getMoveRange(vampire, position);
    expect(range).toEqual(expect.arrayContaining([19, 20, 26, 28, 34, 35]));
  });

  test('Undead movement range', () => {
    const undead = new Undead(1);
    const position = 27;
    const range = gameController.getMoveRange(undead, position);
    expect(range).toEqual(expect.arrayContaining([3, 11, 19, 35, 43, 51]));
  });

  test('Daemon movement range', () => {
    const daemon = new Daemon(1);
    const position = 27;
    const range = gameController.getMoveRange(daemon, position);
    expect(range).toEqual(expect.arrayContaining([26, 28, 19, 35]));
  });

});

describe('GameController - Attack Range', () => {
  let gameController;

  beforeEach(() => {
    const gamePlay = new GamePlay();
    gameController = new GameController(gamePlay);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    gameController.playerTeam = [
      new PositionedCharacter(new Bowman(1), 27), // –ò–≥—Ä–æ–∫ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 27
    ];

    gameController.enemyTeam = [
      new PositionedCharacter(new Vampire(1), 18), // –í—Ä–∞–≥ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 18
      new PositionedCharacter(new Undead(1), 19),  // –í—Ä–∞–≥ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 19
    ];

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ positions
    gameController.positions = [
      ...gameController.playerTeam,
      ...gameController.enemyTeam,
    ];

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–Ω—è—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    gameController.updateOccupiedPositions();
  });

  test('Bowman attack range includes enemy positions', () => {
    const bowman = gameController.playerTeam[0].character; // –ò–≥—Ä–æ–∫-–ë–æ—É–º–µ–Ω
    const position = gameController.playerTeam[0].position; // –ü–æ–∑–∏—Ü–∏—è –ë–æ—É–º–µ–Ω–∞

    const range = gameController.getAttackRange(bowman, position);

    expect(range).toEqual(expect.arrayContaining([18, 19]));
  });

  test('Swordsman attack range includes enemy positions', () => {
    gameController.playerTeam = [
      new PositionedCharacter(new Swordsman(1), 27),
    ];

    const swordsman = gameController.playerTeam[0].character; // –ò–≥—Ä–æ–∫-–ú–µ—á–Ω–∏–∫
    const position = gameController.playerTeam[0].position; // –ü–æ–∑–∏—Ü–∏—è –ú–µ—á–Ω–∏–∫–∞

    const range = gameController.getAttackRange(swordsman, position);

    expect(range).toEqual(expect.arrayContaining([18, 19]));
  });

  test('Magician attack range includes enemy positions', () => {
    gameController.playerTeam = [
      new PositionedCharacter(new Magician(1), 27),
    ];

    const magician = gameController.playerTeam[0].character; // –ò–≥—Ä–æ–∫-–ú–∞–≥
    const position = gameController.playerTeam[0].position; // –ü–æ–∑–∏—Ü–∏—è –ú–∞–≥–∞

    const range = gameController.getAttackRange(magician, position);

    expect(range).toEqual(expect.arrayContaining([18, 19]));
  });
});
