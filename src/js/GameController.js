import GamePlay from './GamePlay';

import GameState from './GameState';

import themes from './themes';
import { generateTeam } from './generators';
import PositionedCharacter from './PositionedCharacter';
import cursors from './cursors';
import Character from './Character';

import Bowman from './characters/Bowman';
import Swordsman from './characters/Swordsman';
import Magician from './characters/Magician';
import Vampire from './characters/Vampire';
import Undead from './characters/Undead';
import Daemon from './characters/Daemon';

const characterTypeMap = {
  bowman: Bowman,
  swordsman: Swordsman,
  magician: Magician,
  vampire: Vampire,
  undead: Undead,
  daemon: Daemon,
};

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.gameState = new GameState();
    this.boardSize = 8;

    this.playerTeam = [];
    this.enemyTeam = [];
    this.maxScore = 0;
    this.scoresReset = false;
    this._initializeBaseState();
  }

  _initializeGame(isNewGame = false) {
    this._initializeBaseState();

    this.isGameOver = false;
    this.updateScoreDisplay();

    if (isNewGame) {
      this.resetCurrentScore();
    // } else {
    //   localStorage.clear();
    }

    this.playerTeam = [];
    this.enemyTeam = [];
    this.createTeams(2, 2);
    this.resetAllCharacters();

    console.log('stateService:', this.stateService);

    let savedState;
    try {
      savedState = this.stateService.load();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
      savedState = null;
    }

    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', savedState);

    try {
      this.maxScore = savedState.maxScore;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞:', error);
      this.maxScore = 0;
    };
    console.log(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—á—ë—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: ${this.maxScore}`);
    this.updateScoreDisplay();


    const scoreBoard = document.querySelector('.score-board');
    let scoreBoardContent = '';
    if (scoreBoard) {
      scoreBoardContent = scoreBoard.outerHTML;
      scoreBoard.remove();
    }

    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã...');

    this.gamePlay.drawUi(themes.prairie);
    if (scoreBoardContent) {
      this.gamePlay.container.insertAdjacentHTML('beforeend', scoreBoardContent);
    }

    this.redrawPositions();
    this.addEventListeners();
    this.addButtonListeners();
  }

  init() {
    console.log('start');
    this.createScoreBoard();
    this._initializeGame(false); // false - —ç—Ç–æ –Ω–µ –Ω–æ–≤–∞—è –∏–≥—Ä–∞
  }

  initNewGame() {
    GamePlay.showMessage('–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!');
    this._initializeGame(true); // true - —ç—Ç–æ –Ω–æ–≤–∞—è –∏–≥—Ä–∞
  }

  _initializeBaseState() {
    this.positions = [];
    this.occupiedPositions = [];
    this.selectedCharacter = null;
    this.currentThemeIndex = 0;
    this.currentTurn = 'player';
    this.currentScore = 0;
  }

  resetAllCharacters() {
    this.positions.forEach((positionedCharacter) => {
      const character = positionedCharacter.character;

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      character.level = 1;
      character.health = 50;

      switch (character.constructor) {
        case Bowman:
          character.attack = 25;
          character.defence = 25;
          break;
        case Swordsman:
          character.attack = 40;
          character.defence = 10;
          break;
        case Magician:
          character.attack = 10;
          character.defence = 40;
          break;
        case Vampire:
          character.attack = 25;
          character.defence = 25;
          break;
        case Undead:
          character.attack = 40;
          character.defence = 10;
          break;
        case Daemon:
          character.attack = 10;
          character.defence = 10;
          break;
        default:
          throw new Error('Unknown character type');
      }
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞ –∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
   */
  createTeams(playerCount, enemyCount) {
    this.playerTeam = this.placeTeam(
      generateTeam([Bowman, Swordsman, Magician], 1, playerCount),
      [0, 1]
    );

    this.enemyTeam = this.placeTeam(
      generateTeam([Vampire, Undead, Daemon], 1, enemyCount),
      [6, 7]
    );

    this.positions = [...this.playerTeam, ...this.enemyTeam];

    console.log('this.positions =', this.positions);
    console.log('this.enemyTeam =', this.enemyTeam);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
   */
  updateOccupiedPositions() {
    this.occupiedPositions = this.positions.map((pos) => pos.position);
  }

   /**
   * –†–∞–∑–º–µ—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
   * @param {Array} characters - –ú–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
   * @param {Array} columns - –°—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
   * @returns {Array} –ú–∞—Å—Å–∏–≤ PositionedCharacter
   */
  placeTeam(characters, columns) {
    return characters.map((character) => {
      const position = this.getRandomPosition(columns);
      const positionedCharacter = new PositionedCharacter(character, position);
      this.positions.push(positionedCharacter);
      this.updateOccupiedPositions();
      console.log('Placed character:', positionedCharacter);
      return positionedCharacter;
    });
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–æ–∑–∏—Ü–∏—é.
   * @param {Array} columns - –°—Ç–æ–ª–±—Ü—ã –¥–ª—è –≤—ã–±–æ—Ä–∞.
   * @returns {number} –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è.
   */
  getRandomPosition(columns) {
    const positions = this.generatePositions(columns);
    let position;
    do {
      position = positions.pop();
    } while (this.occupiedPositions.includes(position));
    return position;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –ø–æ–ª–µ
   * @param {Array} columns - –°—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
   */
  generatePositions(columns) {
    const positions = [];
    for (let i = 0; i < this.boardSize; i++) {
      columns.forEach((column) => {
        positions.push(i * this.boardSize + column);
      });
    }
    return positions.sort(() => Math.random() - 0.5);
  }

  levelUpCharacter(character, levels = 1) {
    for (let i = 0; i < levels; i++) {
      console.log('–ø–æ–≤—ã—à–∞–µ–º:', character.type);
      console.log(`–≤—Ö. –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: üéñ${character.level} ‚öî${character.attack} üõ°${character.defence} ‚ù§${character.health}`);

      character.level += 1;

      // –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∞—Ç–∞–∫–∏/–∑–∞—â–∏—Ç—ã:
      character.attack = Math.max(
            character.attack,
            Math.round(character.attack * (80 + character.health) / 100)
        );

      character.defence = Math.max(
        character.defence,
        character.defence * (80 + character.health) / 100
      );

      // –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å health –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –∫ –∑–Ω–∞—á–µ–Ω–∏—é: —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å + 80 (–Ω–æ –Ω–µ –±–æ–ª–µ–µ 100).
      character.health = Math.min(100, character.level + 80);

      console.log(`–≤—ã—Ö. –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: üéñ${character.level} ‚öî${character.attack} üõ°${character.defence} ‚ù§${character.health}`);

    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
   */
  redrawPositions() {
    if (this.isGameOver) {
      console.log('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.');
      return;
    }

    if (this.checkGameOver()) {  // –∑–¥–µ—Å—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è this.enemyTeam –∏ this.playerTeam
      return;
    }

    console.log('–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–π. –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:', this.positions);
    this.gamePlay.redrawPositions(this.positions);

    const scoreBoard = document.querySelector('.score-board');
    if (scoreBoard && !document.body.contains(scoreBoard)) {
      console.warn('.score-board –±—ã–ª —É–¥–∞–ª—ë–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ.');
      this.gamePlay.container.appendChild(scoreBoard);
    }
    console.log('–í—ã–∑–æ–≤ updateScoreDisplay –∏–∑ redrawPositions');
    this.updateCurrentScore(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞

    // if (this.checkGameOver()) {
    //   return;
    // }
  }

  checkGameOver() {
    console.log('<<<  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã  >>>');

    this.enemyTeam = this.positions.filter((pos) =>
      this.enemyTeam.some((enemy) => enemy.character === pos.character)
    );

    this.playerTeam = this.positions.filter((pos) =>
      this.playerTeam.some((player) => player.character === pos.character)
    );

    if (this.enemyTeam.length === 0 && this.playerTeam.length > 0) {

        if (this.currentThemeIndex === 3) {
          console.log('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥');

          if (this.currentScore > this.maxScore) {
            console.log(`–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥! –°—Ç–∞—Ä—ã–π —Ä–µ–∫–æ—Ä–¥: ${this.maxScore}, –Ω–æ–≤—ã–π: ${this.currentScore}`);
            this.maxScore = this.currentScore;
            this.saveMaxScore();
          }

          //this.updateCurrentScore(); // –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç –æ—á–∫–æ–≤
          //this.updateMaxScore(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞
          this.updateScoreDisplay();
          GamePlay.showMessage('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏!');
          this.blockGameField();
          this.isGameOver = true;
          return true;
        }
        GamePlay.showMessage('–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å!');
        this.updateCurrentScore();
        this.updateScoreDisplay();
        this.startNextLevel();
        return true;
    }
    if (this.playerTeam.length === 0) {
      console.log('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª.');
      this.updateCurrentScore(); // –ü–µ—Ä–µ—Å—á—ë—Ç –æ—á–∫–æ–≤ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
      GamePlay.showMessage('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!');
      this.blockGameField();
      this.isGameOver = true;
      return true;
    }
    return false; // —Ä–∞—É–Ω–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

  }

  blockGameField() {
    try {
        this.removeCellClickListener();
        this.removeCellEnterListener();
        this.removeCellLeaveListener();

        console.log('–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ "Save" –∏ "Load"
        this.saveGameEl.disabled = true;
        this.loadGameEl.disabled = true;

        // –û—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "New Game"
        this.newGameEl.disabled = false;

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è:', err.message);
    }
  }

  updateCurrentScore() {
    console.log('–ü–µ—Ä–µ—Å—á—ë—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—á—ë—Ç–∞');
    console.log('–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞:', this.playerTeam, '!! selectedCharacter??', this.selectedCharacter);
    this.currentScore = this.playerTeam.reduce(
      (acc, positionedCharacter) => acc + Math.round(positionedCharacter.character.health),
      0
    );
    console.log(`–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: ${this.currentScore}`);
  }

  updateMaxScore() {
    if (this.currentScore > this.maxScore) {
      console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞: —Å—Ç–∞—Ä—ã–π ${this.maxScore}, –Ω–æ–≤—ã–π ${this.currentScore}`);
      this.maxScore = this.currentScore;
      this.saveMaxScore();
    }
  }

  saveMaxScore() {
    const savedState = this.stateService.load() || {};
    savedState.maxScore = this.maxScore;
    this.stateService.save(savedState);
  }

  resetCurrentScore() {
    this.currentScore = 0;
    if (!this.scoresReset) { // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–±—Ä–∞—Å—ã–≤–∞–ª–∏—Å—å –ª–∏ —Å—á—ë—Ç—á–∏–∫–∏ —Ä–∞–Ω–µ–µ
      console.log('–ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏...');
      this.scoresReset = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
      const recordReset = confirm('–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∫–æ—Ä–¥?')
      if (recordReset) {
        this.maxScore = 0; // –°–±—Ä–æ—Å —Ä–µ–∫–æ—Ä–¥–∞
        localStorage.clear(); // –û—á–∏—Å—Ç–∫–∞ localStorage
        console.log('–°—á—ë—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.');
      }
      //this.updateScoreDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    }
  }

  updateScoreDisplay() {
    console.log('–í—ã–∑–æ–≤ updateScoreDisplay');

    if (!this.gamePlay.container) {
      console.error('gamePlay.container is not defined.');
      return;
    }

    let scoreElement = document.querySelector('.score-board');
    if (!scoreElement) {
      scoreElement = document.createElement('div');
      scoreElement.classList.add('score-board');
      // scoreElement.textContent = `–†–µ–∫–æ—Ä–¥: ${this.maxScore}, —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: ${this.currentScore}`;
      // this.gamePlay.container.appendChild(scoreElement);
    // } else {
    //   scoreElement.textContent = `–†–µ–∫–æ—Ä–¥: ${this.maxScore}, —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: ${this.currentScore}`;
    }

    const currentScoreElement = document.querySelector('.current-score');
    const maxScoreElement = document.querySelector('.max-score');
    console.log(`–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: ${this.currentScore}`);
    console.log(`–†–µ–∫–æ—Ä–¥: ${this.maxScore}`);

    if (currentScoreElement) {
      currentScoreElement.textContent = `–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: ${this.currentScore}`;
    }

    if (maxScoreElement) {
      maxScoreElement.textContent = `–†–µ–∫–æ—Ä–¥: ${this.maxScore}`;
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å GameController
  createScoreBoard() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ score-board, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if (document.querySelector('.score-board')) return;

    // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—á—ë—Ç–∞
    const scoreBoard = document.createElement('div');
    scoreBoard.classList.add('score-board');

    // –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—á—ë—Ç–∞
    const currentScore = document.createElement('div');
    currentScore.classList.add('current-score');
    currentScore.textContent = '–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: 0';

    // –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–∫–æ—Ä–¥–∞
    const maxScore = document.createElement('div');
    maxScore.classList.add('max-score');
    maxScore.textContent = '–†–µ–∫–æ—Ä–¥: 0';

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    scoreBoard.appendChild(currentScore);
    scoreBoard.appendChild(maxScore);

    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    this.gamePlay.container.insertAdjacentElement('afterbegin', scoreBoard);
  }


  onEnemyDefeated(enemyCharacter) {
    // –õ–æ–≥–∏–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –≤—Ä–∞–≥–∞
    const enemyIndex = this.enemyTeam.indexOf(enemyCharacter);
    if (enemyIndex !== -1) {
      this.enemyTeam.splice(enemyIndex, 1);
      this.currentScore += 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç
      this.updateScoreDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
    if (this.enemyTeam.length === 0) {
      this.endRound();
    }
  }

  endRound() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç –±–æ–ª—å—à–µ
    if (this.currentScore > this.maxScore) {
      this.maxScore = this.currentScore;
    }

    this.updateScoreDisplay(); // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—É–Ω–¥–∞

    // –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    GamePlay.showMessage('–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...');
    this.createTeams(2, 2); // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    this.resetAllCharacters();
    this.redrawPositions();
  }

  removeCellClickListener() {
    this.gamePlay.boardEl.removeEventListener('click', this.onCellClick);
  }

  removeCellEnterListener() {
    // true –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å–æ–±—ã—Ç–∏–π
    this.gamePlay.boardEl.removeEventListener('mouseenter', this.onCellEnter, true);
  }

  removeCellLeaveListener() {
    // true –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å–æ–±—ã—Ç–∏–π
    this.gamePlay.boardEl.removeEventListener('mouseleave', this.onCellLeave, true);
  }

  trackMaxScore(currentScore) {
    const savedState = this.stateService.load();
    const maxScore = savedState?.maxScore || 0;
    this.stateService.save({ ...savedState, maxScore: Math.max(maxScore, currentScore) });
  }

  calculateCurrentScore() {
      return this.playerTeam.reduce((acc, positionedCharacter) => acc + positionedCharacter.character.level * 10, 0);
  }

  levelUpCharacters() {
    this.playerTeam.forEach((positionedCharacter) => {
      this.levelUpCharacter(positionedCharacter.character);
    });
  }

  startNextLevel() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç .score-board
    const scoreBoard = document.querySelector('.score-board');
    let scoreBoardContent = '';
    if (scoreBoard) {
      scoreBoardContent = scoreBoard.outerHTML; // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      scoreBoard.remove(); // –£–¥–∞–ª—è–µ–º –∏–∑ DOM –≤—Ä–µ–º–µ–Ω–Ω–æ
    }

    if (this.selectedCharacter) {
      this.gamePlay.deselectCell(this.selectedCharacter.position);
      this.selectedCharacter = null;
    }

    this.currentThemeIndex = (this.currentThemeIndex + 1) % Object.keys(themes).length;
    const theme = Object.values(themes)[this.currentThemeIndex];
    this.gamePlay.drawUi(theme);

    //  –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const level = this.currentThemeIndex + 1; // –ò–Ω–¥–µ–∫—Å —Ç–µ–º—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 1
    let playerCount, enemyCount;
    if (level === 2) {
        playerCount = 3;
        enemyCount = 3;
    } else if (level >= 3) {
        playerCount = 5;
        enemyCount = 5;
    } else {
        playerCount = 2;
        enemyCount = 2;
    }
    // 1. –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è "–∂–∏–≤—ã—Ö" –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    this.playerTeam = this.playerTeam.map((positionedCharacter) => {
      this.levelUpCharacter(positionedCharacter.character, 1); // –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ 1
      return positionedCharacter;
    });

    // 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å —É—Ä–æ–≤–Ω–µ–º 1
    const newPlayerCharacters = generateTeam(
      [Bowman, Swordsman, Magician], 1, playerCount - this.playerTeam.length
    );
    const newEnemyCharacters = generateTeam(
        [Vampire, Undead, Daemon], 1, enemyCount);

    // 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –∫–æ–º–∞–Ω–¥—ã
    this.playerTeam = [
        ...this.playerTeam,
        ...this.placeTeam(newPlayerCharacters, [0, 1]),
    ];
    this.enemyTeam = [
        ...this.enemyTeam,
        ...this.placeTeam(newEnemyCharacters, [6, 7]),
    ];

    this.positions = [...this.playerTeam, ...this.enemyTeam];

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç .score-board
    if (scoreBoardContent) {
      this.gamePlay.container.insertAdjacentHTML('beforeend', scoreBoardContent);
    }

    this.redrawPositions();
    this.addButtonListeners();
    this.updateScoreDisplay();
    this.currentTurn = 'player';
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏ –≤—ã–≤–æ–¥ –∏–∫–æ–Ω–æ–∫-—ç–º–æ–¥–∑–∏
   * @param {Object} character - –û–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  formatCharacterInfo(character) {
    return `üéñ${character.level} ‚öî${character.attack} üõ°${character.defence} ‚ù§${character.health}`;
  }

  /**
   * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  moveCharacter(positionedCharacter, newPosition) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ occupiedPositions
    this.occupiedPositions = this.occupiedPositions.filter(
      (pos) => pos !== positionedCharacter.position
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    positionedCharacter.position = newPosition;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤ occupiedPositions
    this.occupiedPositions.push(newPosition);

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ positions
    this.updateOccupiedPositions();
  }

  /**
   * –õ–æ–≥–∏–∫–∞ –∞—Ç–∞–∫–∏ –≤ –∫–ª–∞—Å—Å–µ GameController, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ showDamage –∏–∑ GamePlay.
   * @param {*} attacker
   * @param {*} targetPosition
   * @param {string} turn - –¢–µ–∫—É—â–∏–π —Ö–æ–¥ ('player' –∏–ª–∏ 'enemy').
   */
  async attack(attacker, targetPosition, turn = 'player') {
    console.log(`async attack –ê—Ç–∞–∫–∞: ${attacker.type} –∞—Ç–∞–∫—É–µ—Ç –∫–ª–µ—Ç–∫—É ${targetPosition} (${turn} —Ö–æ–¥)`);

    const target = this.positions.find((pos) => pos.position === targetPosition);
    if (!target) {
      throw new Error('attack: –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const damage = Math.round(
      Math.max(attacker.attack - target.character.defence, attacker.attack * 0.1) * 10) / 10;

    console.log('async attack: –≤—ã–∑–æ–≤ showDamage:', { targetPosition, damage, attacker, target });
    await this.gamePlay.showDamage(targetPosition, damage);
    console.log('showDamage –≤—ã–ø–æ–ª–Ω–µ–Ω.');

    target.character.health -= damage;

    if (target.character.health <= 0) {
      console.log(`async attack –ü–µ—Ä—Å–æ–Ω–∞–∂ ${target.character.type} —É–Ω–∏—á—Ç–æ–∂–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${targetPosition}`);

      // –£–¥–∞–ª—è–µ–º "—É–±–∏—Ç–æ–≥–æ" –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      this.positions = this.positions.filter((pos) => pos !== target);
      this.updateOccupiedPositions();

      // if (this.isEnemy(target.character)) {
        this.enemyTeam = this.enemyTeam.filter((enemy) => enemy !== target);
      // } else {
        this.playerTeam = this.playerTeam.filter((player) => player !== target);
      // }
      this.selectedCharacter = null;
    }

    console.log('async attack –î–æ –≤—ã–∑–æ–≤–∞ redrawPositions');
    this.redrawPositions();
    console.log('async attack –ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ redrawPositions');
  }

  /**
   –õ–æ–≥–∏–∫–∞ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞.
   */
  async enemyTurn() {
    console.log('async enemyTurn –ù–∞—á–∞–ª–æ —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞');

    if (this.enemyTeam.length === 0) {
      console.log('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤ –¥–ª—è —Ö–æ–¥–∞.');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–∞
    const playerCharacters = this.positions.filter((pos) =>
      this.playerTeam.some((playerPos) => playerPos === pos)
    );

    console.log(`async enemyTurn –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–∞: ${playerCharacters.map((pc) => pc.character.type)}`);

    if (playerCharacters.length === 0) {
      GamePlay.showMessage('–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–≥—Ä–æ–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.');
      this.isGameOver = true;
      return;
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∞—Ç–∞–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    let bestAttack = null;

    for (const enemy of this.enemyTeam) {
      const attackRange = this.getAttackRange(enemy.character, enemy.position, false);
      for (const player of playerCharacters) {
        if (attackRange.includes(player.position)) {
          const distance = Math.abs(enemy.position - player.position);
          if (!bestAttack || distance < bestAttack.distance) {
            bestAttack = { enemy, target: player, distance };
          }
        }
      }
    }

    if (bestAttack) {
      console.log(`async enemyTurn –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç: ${bestAttack.enemy.character.type} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${bestAttack.enemy.position} –∞—Ç–∞–∫—É–µ—Ç –∏–≥—Ä–æ–∫–∞ ${bestAttack.target.character.type} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${bestAttack.target.position}`);
      await this.attack(bestAttack.enemy.character, bestAttack.target.position, 'enemy');
      return;
    //}
    } else {
      console.log('async enemyTurn –í—Ä–∞–≥ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è');
      const enemyToMove = this.enemyTeam[0];
      const moveRange = this.getMoveRange(enemyToMove.character, enemyToMove.position);
      if (moveRange.length > 0) {
        const targetPosition = moveRange[0];
        console.log(
          `async enemyTurn –í—Ä–∞–≥ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è —Å –ø–æ–∑–∏—Ü–∏–∏ ${enemyToMove.position} –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${targetPosition}`
        );
        this.moveCharacter(enemyToMove, targetPosition);
        this.redrawPositions();
      }
    }

    console.log('--> async enemyTurn --> –ü–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥ –∏–≥—Ä–æ–∫—É');
    this.currentTurn = 'player';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
   */
  addEventListeners() {
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));
    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));
  }

  onCellClick = async (index) => {
    if (this.isGameOver) {
      console.log('onCellClick: –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.');
      return;
    }

    console.log(`onCellClick –ö–ª–∏–∫ –ø–æ –∫–ª–µ—Ç–∫–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index}`);
    const positionedCharacter = this.positions.find((pos) => pos.position === index);

    // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ, –Ω–æ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –∏–≥—Ä–æ–∫ ---> –ø–æ–ø—ã—Ç–∫–∞ —Ö–æ–¥–∞
    if (!positionedCharacter && this.selectedCharacter) {
      const moveRange = this.getMoveRange(this.selectedCharacter.character, this.selectedCharacter.position);

      // –ï—Å–ª–∏ –∫–ª–∏–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è --> —Ö–æ–¥
      if (moveRange.includes(index)) {
        this.gamePlay.deselectCell(this.selectedCharacter.position);
        this.moveCharacter(this.selectedCharacter, index);
        this.selectedCharacter = null;
        this.redrawPositions();

        // –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∫ –≤—Ä–∞–≥—É
        this.currentTurn = 'enemy';
        console.log(`--> onCellClick --> –•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω: ${this.currentTurn}`);
        await this.enemyTurn();
        return;
      }

      // –∫–ª–∏–∫ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞  --> —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      GamePlay.showError('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ —ç—Ç—É –∫–ª–µ—Ç–∫—É.');   // --->  –æ—à–∏–±–∫–∞
      return;
    }

    // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ, –∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ –∏–≥—Ä–æ–∫–∞
    if (!positionedCharacter) {
      GamePlay.showError('–í —ç—Ç–æ–π —è—á–µ–π–∫–µ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.');
      return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
    const character = positionedCharacter.character;
    const playerTypes = [Bowman, Swordsman, Magician];

    if (this.selectedCharacter) {
      const attackRange = this.getAttackRange(this.selectedCharacter.character, this.selectedCharacter.position);

      // –ï—Å–ª–∏ –∫–ª–∏–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∞—Ç–∞–∫–∏ (–∫–ª–∏–∫ –Ω–∞ –≤—Ä–∞–≥–∞)
      if (attackRange.includes(index) && this.enemyTeam.some((enemy) => enemy.position === index)) {
        const attacker = this.selectedCharacter.character;
        const target = positionedCharacter.character;

        console.log('onCellClick –ê—Ç–∞–∫–∞:', {
          attacker: { ...attacker },
          target: { ...target },
          targetIndex: index,
        });

        const damage = Math.max(attacker.attack - target.defence, attacker.attack * 0.1);

        console.log('onCellClick: –≤—ã–∑–æ–≤ showDamage:', { index, damage, attacker, target });
        await this.gamePlay.showDamage(index, damage);
        console.log('showDamage –≤—ã–ø–æ–ª–Ω–µ–Ω.');

        target.health -= damage;

        if (target.health <= 0) {
          // –£–¥–∞–ª—è–µ–º "—É–±–∏—Ç–æ–≥–æ" –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          this.positions = this.positions.filter((pos) => pos !== positionedCharacter);
          console.log('onCellClick —É–±–∏–ª–∏', target.type, 'this.positions', this.positions);
          this.updateOccupiedPositions();

          //if (this.isEnemy(target.character)) {
            this.enemyTeam = this.enemyTeam.filter((enemy) => enemy !== target);
          //} else {
            this.playerTeam = this.playerTeam.filter((player) => player !== target);
          //}

          // if (this.checkGameOver()) {
          //   return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
          // }
          console.log('onCellClick –î–æ –≤—ã–∑–æ–≤–∞ redrawPositions');
          this.redrawPositions();
          console.log('onCellClick –ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ redrawPositions');
          this.checkGameOver()
          return;
        }

        console.log('onCellClick –î–æ –≤—ã–∑–æ–≤–∞ redrawPositions');
        this.redrawPositions();
        console.log('onCellClick –ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ redrawPositions');

        this.currentTurn = 'enemy';
        console.log(`--> onCellClick --> –•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω: ${this.currentTurn}`);
        await this.enemyTurn();
        return;
      }

      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –∫–ª–∏–∫–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã
      if (playerTypes.includes(character.constructor)) {
        this.gamePlay.deselectCell(this.selectedCharacter.position);
        this.selectedCharacter = positionedCharacter; // –û–±–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.gamePlay.selectCell(index, 'yellow');
        console.log(`–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${character.constructor.name} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${index}`);
        return;
      }

      GamePlay.showError('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫—É
    if (!playerTypes.includes(character.constructor)) {
      GamePlay.showError('–≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.');
      return;
    }

    // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω, —Å–Ω—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—ã–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π
    if (this.selectedCharacter) {
      this.gamePlay.deselectCell(this.selectedCharacter.position);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    this.selectedCharacter = positionedCharacter;
    this.gamePlay.selectCell(index, 'yellow');

    console.log(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${character.constructor.name} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${index}`);
  }

  onCellEnter(index) {
    if (this.isGameOver) {
      console.log('onCellClick: –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.');
      return;
    }
    // console.log(`–ù–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index}`);
    const positionedCharacter = this.positions.find((pos) => pos.position === index);
    const { selectedCharacter } = this;

    // –ï—Å–ª–∏ –≤ —è—á–µ–π–∫–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂
    if (positionedCharacter) {
      const characterInfo = this.formatCharacterInfo(positionedCharacter.character);
      this.gamePlay.showCellTooltip(characterInfo, index);

      const isPlayerCharacter = this.playerTeam.some((pos) => pos.position === index);

      if (isPlayerCharacter) {
        this.gamePlay.setCursor(cursors.pointer);
      } else if (selectedCharacter) {
        const attackRange = this.getAttackRange(selectedCharacter.character, selectedCharacter.position);

        if (attackRange.includes(index)) {
          this.gamePlay.setCursor(cursors.crosshair);
          this.gamePlay.selectCell(index, 'red');
        } else {
          this.gamePlay.setCursor(cursors.notallowed);
        }
      }
      return;
    }

    // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —è—á–µ–π–∫–µ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
    if (selectedCharacter) {
      const moveRange = this.getMoveRange(selectedCharacter.character, selectedCharacter.position);

      if (moveRange.includes(index)) {
        this.gamePlay.setCursor(cursors.pointer);
        this.gamePlay.selectCell(index, 'green');
      } else {
        this.gamePlay.setCursor(cursors.notallowed);
      }

      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂—ë–ª—Ç–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏
      this.gamePlay.selectCell(selectedCharacter.position, 'yellow');
    } else {
      this.gamePlay.setCursor(cursors.auto);
    }
  }

  onCellLeave(index) {
    // console.log(`–£—Ö–æ–¥ –º—ã—à–∏ —Å –∫–ª–µ—Ç–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index}`);
    this.gamePlay.hideCellTooltip(index);
    this.gamePlay.deselectCell(index);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
   */
  addButtonListeners() {
    this.newGameEl = document.querySelector('[data-id="action-restart"]');
    this.saveGameEl = document.querySelector('[data-id="action-save"]');
    this.loadGameEl = document.querySelector('[data-id="action-load"]');

    if (this.newGameEl && this.saveGameEl && this.loadGameEl) {
        this.newGameEl.addEventListener('click', (event) => this.onNewGameClick(event));
        this.saveGameEl.addEventListener('click', (event) => this.onSaveGameClick(event));
        this.loadGameEl.addEventListener('click', (event) => this.onLoadGameClick(event));
    } else {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
    }
  }

  onNewGameClick() {
    console.log('-------–Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ NewGame------');
    this.resetCurrentScore();
    // const currentScore = this.calculateCurrentScore();
    // this.trackMaxScore(currentScore);
    const container = document.getElementById('game-container');

    const newGamePlay = new GamePlay();
    newGamePlay.bindToDOM(container);

    this.gamePlay = newGamePlay;
    // this._initializeGame(true);
    this.initNewGame();
    // this.init();
  };

  onSaveGameClick() {
    console.log('------–Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ SaveGame-------');

    const stateToSave = {
      positions: this.positions.map((pos) => ({
        position: pos.position,
          character: {
            ...pos.character,
            type: pos.character.constructor.name.toLowerCase(),
          },
      })),
      level: this.currentThemeIndex + 1,
      playerMove: this.currentTurn === 'player',
    };

    this.stateService.save(stateToSave);
    console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', stateToSave);

    GamePlay.showMessage('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
  };

  onLoadGameClick = () => {
    console.log('------–Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ LoadGame-------');
    let loadState;

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ stateService
    try {
        loadState = this.stateService.load();
        if (!loadState || !Array.isArray(loadState.positions)) {
            throw new Error('–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
    } catch (err) {
        GamePlay.showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã: ${err.message}`);
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ .score-board
    const scoreBoard = document.querySelector('.score-board');
    let scoreBoardContent = '';
    if (scoreBoard) {
      scoreBoardContent = scoreBoard.outerHTML; // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML
      scoreBoard.remove(); // –£–¥–∞–ª—è–µ–º –∏–∑ DOM
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    try {
        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä GameState
        this.gameState = GameState.from(loadState);
        console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', this.gameState);

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø–æ–∑–∏—Ü–∏–π
        this.positions = this.gameState.positions.map((pos) => {
            const CharacterClass = characterTypeMap[pos.character.type];
            if (!CharacterClass) {
                throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${pos.character.type}`);
            }
            const character = Object.assign(new CharacterClass(), pos.character);
            return { position: pos.position, character };
        });

        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:', this.positions);

        this.currentScore = loadState.currentScore || 0;
        // this.currentScore = loadState.userStats || 0;
        this.maxScore = loadState.maxScore || this.maxScore;
        // this.maxScore = Math.max(this.maxScore, loadState.maxScore || 0);
        console.log('–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', this.currentScore);
        console.log('loadState.userStats', loadState.userStats);
        console.log('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—á—ë—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', this.maxScore);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        this.playerTeam = this.positions.filter((pos) =>
            ['bowman', 'swordsman', 'magician'].includes(pos.character.type)
        );
        console.log('–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', this.playerTeam);

        this.enemyTeam = this.positions.filter((pos) =>
            ['vampire', 'undead', 'daemon'].includes(pos.character.type)
        );
        console.log('–ö–æ–º–∞–Ω–¥–∞ –≤—Ä–∞–≥–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', this.enemyTeam);

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã —á–µ—Ä–µ–∑ levelToThemeMap
        // const levelToThemeMap = ['prairie', 'desert', 'arctic', 'mountain'];
        // const themeKey = levelToThemeMap[this.gameState.level - 1]; // –ò–Ω–¥–µ–∫—Å = —É—Ä–æ–≤–µ–Ω—å - 1
        // const theme = themes[themeKey];
        // if (!theme) {
        //     throw new Error(`–¢–µ–º–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è ${this.gameState.level} (${themeKey}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        // }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–º—ã
        this.currentThemeIndex = (loadState.level || 1) - 1; // –ü—Ä–∏–≤–æ–¥–∏–º —É—Ä–æ–≤–µ–Ω—å –∫ –∏–Ω–¥–µ–∫—Å—É —Ç–µ–º—ã
        const theme = Object.values(themes)[this.currentThemeIndex];

        if (!theme) {
          throw new Error(`–¢–µ–º–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è ${loadState.level} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
        console.log('–¢–µ–º–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', theme);
        console.log('–£—Ä–æ–≤–µ–Ω—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', this.gameState.level);

        this.gamePlay.drawUi(theme);
        this.redrawPositions();
        this.addButtonListeners(); // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ .score-board
        if (scoreBoardContent) {
          this.gamePlay.container.insertAdjacentHTML('beforeend', scoreBoardContent);
        }

        GamePlay.showMessage('–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
        this.updateScoreDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤
    } catch (err) {
        GamePlay.showError(`–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã: ${err.message}`);
    }
  };

  /**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ö–æ–¥—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * @param {Object} character - –ü–µ—Ä—Å–æ–Ω–∞–∂
 * @param {number} position - –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª–µ—Ç–æ–∫
 */
  getMoveRange(character, position, log = false) {
    const distance = this.getMoveDistance(character);
    if (log) {
      console.log('–¥–ª—è position:', position, '–ø–µ—Ä—Å–æ–Ω–∞–∂:', character, 'distance:', distance);
    }
    return this.getRange(position, distance);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –∞—Ç–∞–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @param {Object} character - –ü–µ—Ä—Å–æ–Ω–∞–∂
   * @param {number} position - –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–ª—è –∞—Ç–∞–∫–∏
   */
  getAttackRange(character, position) {
    const distance = this.getAttackDistance(character);
    return this.getRangeAt(position, distance);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
   * –£—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ "—É–±–∏–π—Å—Ç–≤–∞"
   * @param {number} position - –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
   * @param {number} distance - –î–∏—Å—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
   */
  getRange(position, distance) {
    // console.log('–¢–µ–∫—É—â–∏–µ –∑–∞–Ω—è—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:', this.occupiedPositions);

    const range = [];
    const boardSize = this.boardSize;

    const startRow = Math.floor(position / boardSize);
    const startCol = position % boardSize;

    for (let row = 0; row < boardSize; row++) {
      for (let col = 0; col < boardSize; col++) {
        const isWithinRange =
          Math.abs(row - startRow) <= distance &&
          Math.abs(col - startCol) <= distance &&
          (Math.abs(row - startRow) === Math.abs(col - startCol) ||
          row === startRow || col === startCol);

          const index = row * boardSize + col;

          if (isWithinRange && !this.occupiedPositions.includes(index)) {
            range.push(index); // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
          }
      }
    }
    // console.log('–ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Ö–æ–¥–∞:', range, 'position:', position);
    return range;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –¥–ª—è –∞—Ç–∞–∫–∏ ("–∫–≤–∞–¥—Ä–∞—Ç")
   * @param {number} position - –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
   * @param {number} distance - –î–∏—Å—Ç–∞–Ω—Ü–∏—è
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–¥–∏—É—Å–∞
   */
  getRangeAt(position, distance) {
    const attackRange = [];
    const boardSize = this.boardSize;

    const startRow = Math.floor(position / boardSize);
    const startCol = position % boardSize;

    const minRow = Math.max(0, startRow - distance);
    const maxRow = Math.min(boardSize - 1, startRow + distance);
    const minCol = Math.max(0, startCol - distance);
    const maxCol = Math.min(boardSize - 1, startCol + distance);

    for (let row = minRow; row <= maxRow; row++) {
      for (let col = minCol; col <= maxCol; col++) {
        const index = row * boardSize + col;
        attackRange.push(index);
      }
    }

    // console.log('–ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∞—Ç–∞–∫–∏:', attackRange, 'position:', position);
    return attackRange;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @param {Object} character - –ü–µ—Ä—Å–æ–Ω–∞–∂
   * @returns {number} –î–∏—Å—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
   */
  getMoveDistance(character) {
    switch (character.constructor) {
      case Swordsman:
      case Undead:
        return 4;
      case Bowman:
      case Vampire:
        return 2;
      case Magician:
      case Daemon:
        return 1;
      default:
        return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∞—Ç–∞–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @param {Object} character - –ü–µ—Ä—Å–æ–Ω–∞–∂
   * @returns {number} –î–∏—Å—Ç–∞–Ω—Ü–∏—è –∞—Ç–∞–∫–∏
   */
  getAttackDistance(character) {
    switch (character.constructor) {
      case Swordsman:
      case Undead:
        return 1;
      case Bowman:
      case Vampire:
        return 2;
      case Magician:
      case Daemon:
        return 4;
      default:
       return 0;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
   */
  isEnemy(character) {
    return this.enemyTeam.some((pos) => pos.character === character);
  }
}
