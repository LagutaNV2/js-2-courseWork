import GamePlay from './GamePlay';

import themes from './themes';
import { generateTeam } from './generators';
import PositionedCharacter from './PositionedCharacter';
import cursors from './cursors';

import Bowman from './characters/Bowman';
import Swordsman from './characters/Swordsman';
import Magician from './characters/Magician';
import Vampire from './characters/Vampire';
import Undead from './characters/Undead';
import Daemon from './characters/Daemon';

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.boardSize = 8; // –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8x8)

    this.playerTeam = [];
    this.enemyTeam = [];
    this.positions = []; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    this.occupiedPositions = []; // –ó–∞–Ω—è—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    this.selectedCharacter = null; // –•—Ä–∞–Ω–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    this.currentThemeIndex = 0;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
   */
  init() {
    console.log('start');
    this.gamePlay.drawUi(themes.prairie);  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    this.createTeams();                   // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    this.redrawPositions();              // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –ø–æ–ª–µ
    this.addEventListeners();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞ –∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
   */
  createTeams() {
    const playerTypes = [Bowman, Swordsman, Magician];
    const enemyTypes = [Vampire, Undead, Daemon];
    const maxLevel = 4;
    const teamSize = 2;

    const playerCharacters = generateTeam(playerTypes, maxLevel, teamSize);
    const enemyCharacters = generateTeam(enemyTypes, maxLevel, teamSize);

    this.playerTeam = this.placeTeam(playerCharacters, [0, 1]); // –°—Ç–æ–ª–±—Ü—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
    this.enemyTeam = this.placeTeam(enemyCharacters, [6, 7]); // –°—Ç–æ–ª–±—Ü—ã –¥–ª—è –≤—Ä–∞–≥–æ–≤
    console.log('this.enemyTeam =', this.enemyTeam);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–Ω—è—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    this.updateOccupiedPositions();

    this.positions = [...this.playerTeam, ...this.enemyTeam]; // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏

    console.log('this.positions =', this.positions);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
   */
  updateOccupiedPositions() {
    this.occupiedPositions = this.positions.map((pos) => pos.position);
  }


   /**
   * –†–∞–∑–º–µ—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
   * @param {Array} characters - –ú–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
   * @param {Array} columns - –°—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
   * @returns {Array} –ú–∞—Å—Å–∏–≤ PositionedCharacter
   */
  placeTeam(characters, columns) {
    const positionedCharacters = [];
    const positions = this.generatePositions(columns);

    characters.forEach((character) => {
      let position;
      do {
        position = positions.pop();
      } while (this.occupiedPositions.includes(position)); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏

        const positionedCharacter = new PositionedCharacter(character, position);

        this.positions.push(positionedCharacter); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π
        positionedCharacters.push(positionedCharacter);
        this.updateOccupiedPositions(); // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–Ω—è—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
      });

    return positionedCharacters;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –ø–æ–ª–µ
   * @param {Array} columns - –°—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
   */
  generatePositions(columns) {
    const positions = [];
    for (let i = 0; i < this.boardSize; i++) {
      columns.forEach((column) => {
        positions.push(i * this.boardSize + column);
      });
    }
    return this.shuffleArray(positions);
  }

  /**
   * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π
   * @param {Array} array - –ú–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π
   * @returns {Array} –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
   */
  shuffleArray(array) {
    return array.sort(() => Math.random() - 0.5);
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
   */
  redrawPositions() {
    this.gamePlay.redrawPositions(this.positions);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
    if (this.checkGameOver()) {
      return;
    }
  }

  levelUpCharacters() {
    this.playerTeam.forEach((positionedCharacter) => {
      const { character } = positionedCharacter;
      character.level += 1;
      character.health = Math.min(100, character.level + 80);
      character.attack = Math.max(
        character.attack,
        character.attack * (80 + character.health) / 100
      );
      character.defence = Math.max(
        character.defence,
        character.defence * (80 + character.health) / 100
      );
    });
  }

  startNextLevel() {
    this.currentThemeIndex = (this.currentThemeIndex + 1) % Object.keys(themes).length;
    const theme = Object.values(themes)[this.currentThemeIndex];
    this.gamePlay.drawUi(theme);

    this.createTeams();
    this.redrawPositions();
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏ –≤—ã–≤–æ–¥ –∏–∫–æ–Ω–æ–∫-—ç–º–æ–¥–∑–∏
   * @param {Object} character - –û–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  formatCharacterInfo(character) {
    return `üéñ${character.level} ‚öî${character.attack} üõ°${character.defence} ‚ù§${character.health}`;
  }


  /**
   * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  moveCharacter(positionedCharacter, newPosition) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ occupiedPositions
    this.occupiedPositions = this.occupiedPositions.filter(
      (pos) => pos !== positionedCharacter.position
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    positionedCharacter.position = newPosition;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤ occupiedPositions
    this.occupiedPositions.push(newPosition);

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ positions
    this.updateOccupiedPositions();
  }

  /**
   * –õ–æ–≥–∏–∫–∞ –∞—Ç–∞–∫–∏ –≤ –∫–ª–∞—Å—Å–µ GameController, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ showDamage –∏–∑ GamePlay.
   * –í–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∞—Ç–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –∞–Ω–∏–º–∞—Ü–∏—é —É—Ä–æ–Ω–∞.
   * –ü–æ—Å–ª–µ "—É–±–∏–π—Å—Ç–≤–∞" –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–Ω—è—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏.
   * @param {*} attacker
   * @param {*} targetPosition
   * @param {string} turn - –¢–µ–∫—É—â–∏–π —Ö–æ–¥ ('player' –∏–ª–∏ 'enemy').
   */
  async attack(attacker, targetPosition, turn = 'player') {
    const target = this.positions.find((pos) => pos.position === targetPosition);
    if (!target) {
      throw new Error('Target not found');
    }

    const damage = Math.max(
      attacker.attack - target.character.defence,
      attacker.attack * 0.1
    );

    target.character.health -= damage;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É—Ä–æ–Ω–∞
    await this.gamePlay.showDamage(targetPosition, damage);

    if (target.character.health <= 0) {
      // –£–¥–∞–ª—è–µ–º "—É–±–∏—Ç–æ–≥–æ" –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      this.positions = this.positions.filter((pos) => pos !== target);
      this.updateOccupiedPositions();

      //???
      if (this.isEnemy(target.character)) {
        this.enemyTeam = this.enemyTeam.filter((enemy) => enemy !== target);
      } else {
        this.playerTeam = this.playerTeam.filter((player) => player !== target);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    if (this.checkGameOver()) {
      return;
    }

    this.redrawPositions();
  }

  /**
   –õ–æ–≥–∏–∫–∞ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞.
   */
  async enemyTurn() {
    console.log('–ù–∞—á–∞–ª–æ —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤—Ä–∞–≥–∏
    if (this.enemyTeam.length === 0) {
      console.log('–£ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –•–æ–¥ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–∞
    const playerCharacters = this.positions.filter((pos) =>
      this.playerTeam.some((playerPos) => playerPos === pos)
    );

    console.log(`–ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–∞: ${playerCharacters.map((pc) => pc.character.type)}`);

    if (playerCharacters.length === 0) {
      GamePlay.showMessage('–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–≥—Ä–æ–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.');
      return;
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∞—Ç–∞–∫–∞ —Å–∞–º–æ–≥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    let bestAttack = null;

    // –ù–∞—Ö–æ–¥–∏–º –∞—Ç–∞–∫—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π
    for (const enemy of this.enemyTeam) {
      const attackRange = this.getAttackRange(enemy.character, enemy.position, false);
      for (const player of playerCharacters) {
        if (attackRange.includes(player.position)) {
          const distance = Math.abs(enemy.position - player.position);
          if (!bestAttack || distance < bestAttack.distance) {
            bestAttack = { enemy, target: player, distance };
          }
        }
      }
    }

    if (bestAttack) {
      console.log(
        `–í—Ä–∞–≥ ${bestAttack.enemy.character.type} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${bestAttack.enemy.position} –∞—Ç–∞–∫—É–µ—Ç –∏–≥—Ä–æ–∫–∞ ${bestAttack.target.character.type} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${bestAttack.target.position}`
      );
      console.log(`–¥–æ –∞—Ç–∞–∫–∏ üéñ${bestAttack.target.character.level} ‚öî${bestAttack.target.character.attack} üõ°${bestAttack.target.character.defence} ‚ù§${bestAttack.target.character.health}`);
      await this.attack(bestAttack.enemy.character, bestAttack.target.position, 'enemy');
      console.log(`–ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏ üéñ${bestAttack.target.character.level} ‚öî${bestAttack.target.character.attack} üõ°${bestAttack.target.character.defence} ‚ù§${bestAttack.target.character.health}`);

      return;
    }

    console.log('–í—Ä–∞–≥ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ');
    const enemyToMove = this.enemyTeam[0];
    const moveRange = this.getMoveRange(enemyToMove.character, enemyToMove.position);

    if (moveRange.length > 0) {
      const targetPosition = moveRange[0];
      console.log(
        `–í—Ä–∞–≥ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è —Å –ø–æ–∑–∏—Ü–∏–∏ ${enemyToMove.position} –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${targetPosition}`
      );
      this.moveCharacter(enemyToMove, targetPosition);
      this.redrawPositions();
    }


    // –ü–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥ –∏–≥—Ä–æ–∫—É
    console.log('–ü–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥ –∏–≥—Ä–æ–∫—É');
    this.currentTurn = 'player';
  }


  /**
 * –õ–æ–≥–∏–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
 */
  async playerTurn(index) {
    console.log('–ù–∞—á–∞–ª–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞');
    if (this.currentTurn !== 'player') {
      GamePlay.showError('–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç –≤—Ä–∞–≥!');
      return;
    }

    const positionedCharacter = this.positions.find((pos) => pos.position === index);

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞
    if (positionedCharacter && this.playerTeam.some((player) => player.position === index)) {
      if (this.selectedCharacter) {
        this.gamePlay.deselectCell(this.selectedCharacter.position);
      }
      this.selectedCharacter = positionedCharacter;
      this.gamePlay.selectCell(index, 'yellow');
      return;
    }

    // –ï—Å–ª–∏ –∞—Ç–∞–∫—É–µ–º –≤—Ä–∞–≥–∞
    if (this.selectedCharacter) {
      const attackRange = this.getAttackRange(this.selectedCharacter.character, this.selectedCharacter.position);

      if (attackRange.includes(index) && this.enemyTeam.some((enemy) => enemy.position === index)) {

        // const target = this.positions.find((pos) => pos.position === index);
        // console.log(`tearget ${target.caracter.type} –∞—Ç–∞–∫–æ–≤–∞–Ω ${this.selectedCharacter.character.type}`);
        await this.attack(this.selectedCharacter.character, index, 'player');

        this.selectedCharacter = null;

        return;
      }

      // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è
      const moveRange = this.getMoveRange(this.selectedCharacter.character, this.selectedCharacter.position);

      if (moveRange.includes(index) && !this.occupiedPositions.includes(index)) {
        this.moveCharacter(this.selectedCharacter, index);
        this.selectedCharacter = null;

        // –ü–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥ –≤—Ä–∞–≥—É
        this.currentTurn = 'enemy';
        // await this.enemyTurn();
        return;
      }
    }

    GamePlay.showError('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.');
  }



  addEventListeners() {
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));
    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));
  }

  onCellClick = async (index) => {
    console.log(`–ö–ª–∏–∫ –ø–æ –∫–ª–µ—Ç–∫–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index}`);
    const positionedCharacter = this.positions.find((pos) => pos.position === index);

    // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ, –Ω–æ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –∏–≥—Ä–æ–∫ ---> –ø–æ–ø—ã—Ç–∫–∞ —Ö–æ–¥–∞
    if (!positionedCharacter && this.selectedCharacter) {
      const moveRange = this.getMoveRange(this.selectedCharacter.character, this.selectedCharacter.position);

      // –ï—Å–ª–∏ –∫–ª–∏–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è --> —Ö–æ–¥
      if (moveRange.includes(index)) {
        this.gamePlay.deselectCell(this.selectedCharacter.position);
        this.moveCharacter(this.selectedCharacter, index);
        this.selectedCharacter = null;
        this.redrawPositions();

        // –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∫ –≤—Ä–∞–≥—É
        this.currentTurn = 'enemy';
        console.log(`–•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –≤—Ä–∞–≥—É. –¢–µ–∫—É—â–∏–π —Ö–æ–¥: ${this.currentTurn}`);
        await this.enemyTurn();

        return;
      }

      // –∫–ª–∏–∫ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞  --> —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      GamePlay.showError('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ —ç—Ç—É –∫–ª–µ—Ç–∫—É.');   // --->  –æ—à–∏–±–∫–∞
      return;
    }

    // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ, –∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ –∏–≥—Ä–æ–∫–∞
    if (!positionedCharacter) {
      GamePlay.showError('–í —ç—Ç–æ–π —è—á–µ–π–∫–µ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.');
      return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
    const character = positionedCharacter.character;
    const playerTypes = [Bowman, Swordsman, Magician];

    if (this.selectedCharacter) {
      const attackRange = this.getAttackRange(this.selectedCharacter.character, this.selectedCharacter.position);

      // –ï—Å–ª–∏ –∫–ª–∏–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∞—Ç–∞–∫–∏ (–∫–ª–∏–∫ –Ω–∞ –≤—Ä–∞–≥–∞)
      if (attackRange.includes(index) && this.enemyTeam.some((enemy) => enemy.position === index)) {
        const attacker = this.selectedCharacter.character;
        const target = positionedCharacter.character;
        const damage = Math.max(attacker.attack - target.defence, attacker.attack * 0.1);

        console.log(`–í—ã –∞—Ç–∞–∫—É–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${target.type} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${index}, —É—Ä–æ–Ω ${damage}`);
        target.health -= damage;

        // –ê–Ω–∏–º–∞—Ü–∏—è —É—Ä–æ–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        await this.gamePlay.showDamage(index, damage);

        if (target.health <= 0) {
          this.positions = this.positions.filter((pos) => pos !== positionedCharacter);
          console.log('—É–±–∏–ª–∏', target.type, 'this.positions', this.positions);
          this.updateOccupiedPositions();

          const enemys = this.positions.filter((pos)=>
              this.enemyTeam.some((enemy)=>enemy.position === pos.position));
          console.log ('enemys –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏', enemys);
          if (enemys.length === 0) {
            console.log('–≤—Å–µ—Ö –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ –≤—Ä–∞–≥–æ–≤ —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏, –≤—ã–∑—ã–≤–∞–µ–º this.startNextLevel()');
            this.currentTurn = 'player';
            this.startNextLevel()

          }
        }

        this.redrawPositions();

        // –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∫ –≤—Ä–∞–≥—É
        this.currentTurn = 'enemy';
        console.log(`–•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –≤—Ä–∞–≥—É. –¢–µ–∫—É—â–∏–π —Ö–æ–¥: ${this.currentTurn}`);
        await this.enemyTurn();

        return;
      }

      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –∫–ª–∏–∫–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã
      if (playerTypes.includes(character.constructor)) {
        this.gamePlay.deselectCell(this.selectedCharacter.position);
        this.selectedCharacter = positionedCharacter; // –û–±–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.gamePlay.selectCell(index, 'yellow');
        console.log(`–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${character.constructor.name} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${index}`);
        return;
      }

      GamePlay.showError('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫—É
    if (!playerTypes.includes(character.constructor)) {
      GamePlay.showError('–≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.');
      return;
    }

    // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω, —Å–Ω—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—ã–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π
    if (this.selectedCharacter) {
      this.gamePlay.deselectCell(this.selectedCharacter.position);
    }

    this.selectedCharacter = positionedCharacter; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    this.gamePlay.selectCell(index, 'yellow');

    console.log(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${character.constructor.name} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${index}`);
  }


  onCellEnter(index) {
    // console.log(`–ù–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index}`);
    const positionedCharacter = this.positions.find((pos) => pos.position === index);
    const { selectedCharacter } = this;

    // –ï—Å–ª–∏ –≤ —è—á–µ–π–∫–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂
    if (positionedCharacter) {
      const characterInfo = this.formatCharacterInfo(positionedCharacter.character);
      this.gamePlay.showCellTooltip(characterInfo, index);

      const isPlayerCharacter = this.playerTeam.some((pos) => pos.position === index);

      if (isPlayerCharacter) {
        this.gamePlay.setCursor(cursors.pointer);
      } else if (selectedCharacter) {
        const attackRange = this.getAttackRange(selectedCharacter.character, selectedCharacter.position);

        if (attackRange.includes(index)) {
          this.gamePlay.setCursor(cursors.crosshair);
          this.gamePlay.selectCell(index, 'red');
        } else {
          this.gamePlay.setCursor(cursors.notallowed);
        }
      }
      return;
    }

    // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —è—á–µ–π–∫–µ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
    if (selectedCharacter) {
      const moveRange = this.getMoveRange(selectedCharacter.character, selectedCharacter.position);

      if (moveRange.includes(index)) {
        this.gamePlay.setCursor(cursors.pointer);
        this.gamePlay.selectCell(index, 'green');
      } else {
        this.gamePlay.setCursor(cursors.notallowed);
      }

      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂—ë–ª—Ç–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏
      this.gamePlay.selectCell(selectedCharacter.position, 'yellow');
    } else {
      this.gamePlay.setCursor(cursors.auto);
    }
  }

  onCellLeave(index) {
    // console.log(`–£—Ö–æ–¥ –º—ã—à–∏ —Å –∫–ª–µ—Ç–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index}`);
    // –†–µ–∞–∫—Ü–∏—è –Ω–∞ —É—Ö–æ–¥ –º—ã—à–∏ (TODO)
    this.gamePlay.hideCellTooltip(index); // –°–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    this.gamePlay.deselectCell(index); // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
  }


  /**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ö–æ–¥—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * @param {Object} character - –ü–µ—Ä—Å–æ–Ω–∞–∂
 * @param {number} position - –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª–µ—Ç–æ–∫
 */
  getMoveRange(character, position, log = false) {
    const distance = this.getMoveDistance(character);
    if (log) {
      console.log('–¥–ª—è position:', position, '–ø–µ—Ä—Å–æ–Ω–∞–∂:', character, 'distance:', distance);
    }
    return this.getRange(position, distance);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –∞—Ç–∞–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @param {Object} character - –ü–µ—Ä—Å–æ–Ω–∞–∂
   * @param {number} position - –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–ª—è –∞—Ç–∞–∫–∏
   */
  getAttackRange(character, position) {
    const distance = this.getAttackDistance(character);

    return this.getRangeAt(position, distance);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
   * –£—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ "—É–±–∏–π—Å—Ç–≤–∞"
   * @param {number} position - –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
   * @param {number} distance - –î–∏—Å—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
   */
  getRange(position, distance) {
    console.log('–¢–µ–∫—É—â–∏–µ –∑–∞–Ω—è—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:', this.occupiedPositions);

    const range = [];
    const boardSize = this.boardSize;

    const startRow = Math.floor(position / boardSize);
    const startCol = position % boardSize;

    for (let row = 0; row < boardSize; row++) {
      for (let col = 0; col < boardSize; col++) {
        const isWithinRange =
          Math.abs(row - startRow) <= distance &&
          Math.abs(col - startCol) <= distance &&
          (Math.abs(row - startRow) === Math.abs(col - startCol) ||
          row === startRow || col === startCol);

          const index = row * boardSize + col;

          if (isWithinRange && !this.occupiedPositions.includes(index)) {
            range.push(index); // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
          }
      }
    }
    console.log('–ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Ö–æ–¥–∞:', range, 'position:', position);
    return range;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –¥–ª—è –∞—Ç–∞–∫–∏ ("–∫–≤–∞–¥—Ä–∞—Ç")
   * @param {number} position - –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
   * @param {number} distance - –î–∏—Å—Ç–∞–Ω—Ü–∏—è
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–¥–∏—É—Å–∞
   */
  getRangeAt(position, distance) {
    const attackRange = [];
    const boardSize = this.boardSize;

    const startRow = Math.floor(position / boardSize);
    const startCol = position % boardSize;

    const minRow = Math.max(0, startRow - distance);
    const maxRow = Math.min(boardSize - 1, startRow + distance);
    const minCol = Math.max(0, startCol - distance);
    const maxCol = Math.min(boardSize - 1, startCol + distance);

    for (let row = minRow; row <= maxRow; row++) {
      for (let col = minCol; col <= maxCol; col++) {
        const index = row * boardSize + col;
        attackRange.push(index);
      }
    }

    console.log('–ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∞—Ç–∞–∫–∏:', attackRange, 'position:', position);
    return attackRange;
  }


  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @param {Object} character - –ü–µ—Ä—Å–æ–Ω–∞–∂
   * @returns {number} –î–∏—Å—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
   */
  getMoveDistance(character) {
    switch (character.constructor) {
      case Swordsman:
      case Undead:
        return 4;
      case Bowman:
      case Vampire:
        return 2;
      case Magician:
      case Daemon:
        return 1;
      default:
        return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∞—Ç–∞–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @param {Object} character - –ü–µ—Ä—Å–æ–Ω–∞–∂
   * @returns {number} –î–∏—Å—Ç–∞–Ω—Ü–∏—è –∞—Ç–∞–∫–∏
   */
  getAttackDistance(character) {
    switch (character.constructor) {
      case Swordsman:
      case Undead:
        return 1;
      case Bowman:
      case Vampire:
        return 2;
      case Magician:
      case Daemon:
        return 4;
      default:
       return 0;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
   */
  isEnemy(character) {
    return this.enemyTeam.some((pos) => pos.character === character);
  }

  checkGameOver() {
    if (this.enemyTeam.length === 0) {
      GamePlay.showMessage('–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å!');
      this.levelUpCharacters();
      this.startNextLevel();
      return true; // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    }

    if (this.playerTeam.length === 0) {
      GamePlay.showMessage('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!');
      return true; // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    }

    return false; // –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
  }


}
